;; -*- lexical-binding: t -*-

(require 'projection-types)

(require 'projection-test-utils)
(require 'projection-multi-yarn-scripts)

(describe "Project type Yarn"
  (+projection-test-setup)

  (before-each
    (setq projection-project-types (list projection-project-type-yarn))

    (+projection-setup-project
     '(("package.json" . "{
  \"name\": \"projection-test\",
  \"version\": \"1.0.0\",
  \"description\": \"\",
  \"main\": \"index.js\",
  \"scripts\": {
    \"foo\": \"foo bar\",
    \"baz\": \"baz bag\"
  },
  \"author\": \"\",
  \"license\": \"ISC\",
  \"dependencies\": {
    \"is-boolean\": \"^0.0.2\"
  }
}")
       ("yarn.lock" . "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
"))))

  (it "Can be identified"
    (+projection-project-matches-p 'yarn))

  (describe "Multi compile"
    (it "Can extract available scripts"
      ;; GIVEN

      ;; Note: Yarn requires having run yarn install before you can check
      ;; available scripts. Here we just mock it out altogether.
      (spy-on #'shell-command :and-call-fake
              (lambda (&rest _)
                (insert "yarn run v1.22.19
info Commands available from binary scripts: tape
info Project commands
   - baz
      baz bag
   - foo
      foo bar
question Which command would you like to run?: ")))

      ;; WHEN
      (let ((targets (projection-multi-yarn-script-targets)))
        ;; THEN
        (expect targets :to-equal
                '(("yarn:tape" . "yarn run tape")
                  ("yarn:baz" . "yarn run baz")
                  ("yarn:foo" . "yarn run foo"))))

      (expect #'shell-command :to-have-been-called-times 1)))
  )
